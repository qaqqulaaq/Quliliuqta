//This function checks whether the cards for the goal of the game are available for the computer to take
//Note that the values for _goal should only be 5, 10 or 20 for now, based on the difficulty setting

function check_card(_goal){
	//create a status array based on which cards are available
	var _status = array_create(_goal,0);
	with obj_parcard if val > 0 _status[val-1] += 1;
	
	//End the function early if it is obviously impossible to achieve (the sum of the status is less than the target), or if the number is exact
	if step_add(_status) == _goal {    //if the number is exact, then it should be the only possible outcome
		comp_select(_status);
		return true;
	}


	//If the card with the same value of the goal is available, an array that contains only that card is used.
	else if _status[_goal-1] >= 1{
		var _returnarray = array_create(_goal - 1, 0)
		array_push(_returnarray, 1);
		comp_select(_returnarray);
		return true;		
	}
	/////////////////////////////////////
	//If the function got this far, it will test all possible outcomes to determine if there is a possible solution,
	//building from the smallest numbers to try to get the most cards
	/////////////////////////////////////


	while array_length(_status) > 0{
		
		//every iteration begins with checking if dropping the highest card made the goal impossible
		if step_add(_status) < _goal return false
		
		//The _status array is trimmed to the highest available valuse value
		while array_last(_status) == 0 array_pop(_status);	
		_status[array_length(_status)-1] -= 1;
		var _len = array_length(_status);
	

		//an array to be run through comp select is created
		var _returnarray = array_create(_len - 1, 0);
		array_push(_returnarray,1);

	
		//A list of arrays of the same length or less to check is obtained
		var _checkarray = get_check_array(_goal - _len, _len);

	


		//for each of the arrays in the checkarray list, test to see if a suitable one can be found
		for (var _i = 0; _i < array_length(_checkarray); _i++){
			var _found = true;
			for (var _j = 0; _j < array_length(_checkarray[_i]); _j++){
				if _status[_j] < _checkarray[_i][_j] _found = false;
			}
		
			//if one is found, it runs the selection method and returns true.
			if _found{
				for (var _k = 0; _k < array_length(_checkarray[_i]); _k++){
					_returnarray[_k] += _checkarray[_i][_k]
				}
				comp_select(_returnarray);
				return true;	
			}	
		}
		//if a valid result could not be found with the highest card, this card is removed from the status
		array_pop(_status)
		
		//this whole process will be repeated, testing lower cards to see if a suitable combination can be found.
	}
	
	//if it couldn't find a match after all of that, return false and a card is drawn as normal
	return false;
	
}


function get_check_array(_targ,_size){
	var _full;
	switch _targ{
		case 1: _full = [[1]]; break;
		
		case 2: _full = [[2],[0,1]]; break;
		
		case 3: _full = [[3],[1,1],[0,0,1]]; break;
		
		case 4: _full = [[4],[2,1],[0,2],[1,0,1],[0,0,0,1]]; break;

		case 5: _full = [[5],[3,1],[2,0,1],[1,2],[1,0,0,1],[0,1,1],[0,0,0,0,1]]; break;
		
		case 6: _full = [[6],
						[4,1],
						[3,0,1],
						[2,2],
						[2,0,0,1],
						[1,1,1],
						[0,0,2],
						[1,0,0,0,1],
						[0,0,0,0,0,1]]; 
						break;	
		
		case 7: _full = [[7],
						[5,1],
						[4,0,1],
						[3,2],
						[3,0,0,1],
						[2,1,1],
						[1,3],
						[1,0,2],
						[2,0,0,0,1],
						[0,1,0,0,1],
						[1,0,0,0,0,1],
						[0,0,0,0,0,0,1]]
						break;
						
		case 8: _full = [[8],
		                [6, 1],
		                [5, 0, 1],
		                [4, 2],
		                [4, 0, 0, 1],
		                [3, 1, 1],
		                [2, 3],
		                [3, 0, 0, 0, 1],
		                [2, 1, 0, 1],
		                [2, 0, 2],
		                [1, 2, 1],
		                [0, 4],
		                [2, 0, 0, 0, 0, 1],
		                [1, 1, 0, 0, 1],
		                [1, 0, 1, 1],
		                [0, 2, 0, 1],
		                [0, 1, 2],
		                [1, 0, 0, 0, 0, 0, 1],
		                [0, 1, 0, 0, 0, 1],
		                [0, 0, 1, 0, 1],
		                [0, 0, 0, 2],
		                [0, 0, 0, 0, 0, 0, 0, 1]];
		                break;

						
		case 9: _full = [[9],
		                [7, 1],
		                [6, 0, 1],
		                [5, 2],
		                [5, 0, 0, 1],
		                [4, 1, 1],
		                [3, 3],
		                [4, 0, 0, 0, 1],
		                [3, 1, 0, 1],
		                [3, 0, 2],
		                [2, 2, 1],
		                [1, 4],
		                [3, 0, 0, 0, 0, 1],
		                [2, 1, 0, 0, 1],
		                [2, 0, 1, 1],
		                [1, 2, 0, 1],
		                [1, 1, 2],
		                [0, 3, 1],
		                [2, 0, 0, 0, 0, 0, 1],
		                [1, 1, 0, 0, 0, 1],
		                [1, 0, 1, 0, 1],
		                [1, 0, 0, 2],
		                [0, 2, 0, 0, 1],
		                [0, 1, 1, 1],
		                [0, 0, 3],
		                [1, 0, 0, 0, 0, 0, 0, 1],
		                [0, 1, 0, 0, 0, 0, 1],
		                [0, 0, 1, 0, 0, 1],
		                [0, 0, 0, 1, 1],
		                [0, 0, 0, 0, 0, 0, 0, 0, 1]];
		                break;

						
		case 10: _full =[[10],
		                [8, 1],
		                [7, 0, 1],
		                [6, 2],
		                [6, 0, 0, 1],
		                [5, 1, 1],
		                [4, 3],
		                [5, 0, 0, 0, 1],
		                [4, 1, 0, 1],
		                [4, 0, 2],
		                [3, 2, 1],
		                [2, 4],
		                [4, 0, 0, 0, 0, 1],
		                [3, 1, 0, 0, 1],
		                [3, 0, 1, 1],
		                [2, 2, 0, 1],
		                [2, 1, 2],
		                [1, 3, 1],
		                [0, 5],
		                [3, 0, 0, 0, 0, 0, 1],
		                [2, 1, 0, 0, 0, 1],
		                [2, 0, 1, 0, 1],
		                [2, 0, 0, 2],
		                [1, 2, 0, 0, 1],
		                [1, 1, 1, 1],
		                [1, 0, 3],
		                [0, 3, 0, 1],
		                [0, 2, 2],
		                [2, 0, 0, 0, 0, 0, 0, 1],
		                [1, 1, 0, 0, 0, 0, 1],
		                [1, 0, 1, 0, 0, 1],
		                [1, 0, 0, 1, 1],
		                [0, 2, 0, 0, 0, 1],
		                [0, 1, 1, 0, 1],
		                [0, 1, 0, 2],
		                [0, 0, 2, 1],
		                [1, 0, 0, 0, 0, 0, 0, 0, 1],
		                [0, 1, 0, 0, 0, 0, 0, 1],
		                [0, 0, 1, 0, 0, 0, 1],
		                [0, 0, 0, 1, 0, 1],
		                [0, 0, 0, 0, 2],
		                [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]];
		                break;

						
    case 11: _full = [[11],
                [9, 1],
                [8, 0, 1],
                [7, 2],
                [7, 0, 0, 1],
                [6, 1, 1],
                [5, 3],
                [6, 0, 0, 0, 1],
                [5, 1, 0, 1],
                [5, 0, 2],
                [4, 2, 1],
                [3, 4],
                [5, 0, 0, 0, 0, 1],
                [4, 1, 0, 0, 1],
                [4, 0, 1, 1],
                [3, 2, 0, 1],
                [3, 1, 2],
                [2, 3, 1],
                [1, 5],
                [4, 0, 0, 0, 0, 0, 1],
                [3, 1, 0, 0, 0, 1],
                [3, 0, 1, 0, 1],
                [3, 0, 0, 2],
                [2, 2, 0, 0, 1],
                [2, 1, 1, 1],
                [2, 0, 3],
                [1, 3, 0, 1],
                [1, 2, 2],
                [0, 4, 1],
                [3, 0, 0, 0, 0, 0, 0, 1],
                [2, 1, 0, 0, 0, 0, 1],
                [2, 0, 1, 0, 0, 1],
                [2, 0, 0, 1, 1],
                [1, 2, 0, 0, 0, 1],
                [1, 1, 1, 0, 1],
                [1, 1, 0, 2],
                [1, 0, 2, 1],
                [0, 3, 0, 0, 1],
                [0, 2, 1, 1],
                [0, 1, 3],
                [2, 0, 0, 0, 0, 0, 0, 0, 1],
                [1, 1, 0, 0, 0, 0, 0, 1],
                [1, 0, 1, 0, 0, 0, 1],
                [1, 0, 0, 1, 0, 1],
                [1, 0, 0, 0, 2],
                [0, 2, 0, 0, 0, 0, 1],
                [0, 1, 1, 0, 0, 1],
                [0, 1, 0, 1, 1],
                [0, 0, 2, 0, 1],
                [0, 0, 1, 2],
                [0, 1, 0, 0, 0, 0, 0, 0, 1],
                [0, 0, 1, 0, 0, 0, 0, 1],
                [0, 0, 0, 1, 0, 0, 1],
                [0, 0, 0, 0, 1, 1]];
                break;

    case 12: _full = [[12],
                [10, 1],
                [9, 0, 1],
                [8, 2],
                [8, 0, 0, 1],
                [7, 1, 1],
                [6, 3],
                [7, 0, 0, 0, 1],
                [6, 1, 0, 1],
                [6, 0, 2],
                [5, 2, 1],
                [4, 4],
                [6, 0, 0, 0, 0, 1],
                [5, 1, 0, 0, 1],
                [5, 0, 1, 1],
                [4, 2, 0, 1],
                [4, 1, 2],
                [3, 3, 1],
                [2, 5],
                [5, 0, 0, 0, 0, 0, 1],
                [4, 1, 0, 0, 0, 1],
                [4, 0, 1, 0, 1],
                [4, 0, 0, 2],
                [3, 2, 0, 0, 1],
                [3, 1, 1, 1],
                [3, 0, 3],
                [2, 3, 0, 1],
                [2, 2, 2],
                [1, 4, 1],
                [0, 6],
                [4, 0, 0, 0, 0, 0, 0, 1],
                [3, 1, 0, 0, 0, 0, 1],
                [3, 0, 1, 0, 0, 1],
                [3, 0, 0, 1, 1],
                [2, 2, 0, 0, 0, 1],
                [2, 1, 1, 0, 1],
                [2, 1, 0, 2],
                [2, 0, 2, 1],
                [1, 3, 0, 0, 1],
                [1, 2, 1, 1],
                [1, 1, 3],
                [0, 4, 0, 1],
                [0, 3, 2],
                [2, 1, 0, 0, 0, 0, 0, 1],
                [2, 0, 1, 0, 0, 0, 1],
                [2, 0, 0, 1, 0, 1],
                [2, 0, 0, 0, 2],
                [1, 2, 0, 0, 0, 0, 1],
                [1, 1, 1, 0, 0, 1],
                [1, 1, 0, 1, 1],
                [1, 0, 2, 0, 1],
                [1, 0, 1, 2],
                [0, 3, 0, 0, 0, 1],
                [0, 2, 1, 0, 1],
                [0, 2, 0, 2],
                [0, 1, 2, 1],
                [0, 0, 4],
                [1, 0, 1, 0, 0, 0, 0, 1],
                [1, 0, 0, 1, 0, 0, 1],
                [1, 0, 0, 0, 1, 1],
                [0, 2, 0, 0, 0, 0, 0, 1],
                [0, 1, 1, 0, 0, 0, 1],
                [0, 1, 0, 1, 0, 1],
                [0, 0, 2, 0, 0, 1],
                [0, 1, 0, 0, 2],
                [0, 0, 1, 1, 1],
                [0, 0, 0, 3],
                [0, 0, 0, 1, 0, 0, 0, 1],
                [0, 0, 0, 0, 1, 0, 1],
                [0, 0, 0, 0, 0, 2]];
                break;

    case 13: _full = [[13],
                [11, 1],
                [10, 0, 1],
                [9, 2],
                [9, 0, 0, 1],
                [8, 1, 1],
                [7, 3],
                [8, 0, 0, 0, 1],
                [7, 1, 0, 1],
                [7, 0, 2],
                [6, 2, 1],
                [5, 4],
                [7, 0, 0, 0, 0, 1],
                [6, 1, 0, 0, 1],
                [6, 0, 1, 1],
                [5, 2, 0, 1],
                [5, 1, 2],
                [4, 3, 1],
                [3, 5],
                [6, 0, 0, 0, 0, 0, 1],
                [5, 1, 0, 0, 0, 1],
                [5, 0, 1, 0, 1],
                [5, 0, 0, 2],
                [4, 2, 0, 0, 1],
                [4, 1, 1, 1],
                [4, 0, 3],
                [3, 3, 0, 1],
                [3, 2, 2],
                [2, 4, 1],
                [1, 6],
                [4, 1, 0, 0, 0, 0, 1],
                [4, 0, 1, 0, 0, 1],
                [4, 0, 0, 1, 1],
                [3, 2, 0, 0, 0, 1],
                [3, 1, 1, 0, 1],
                [3, 1, 0, 2],
                [3, 0, 2, 1],
                [2, 3, 0, 0, 1],
                [2, 2, 1, 1],
                [2, 1, 3],
                [1, 4, 0, 1],
                [1, 3, 2],
                [0, 5, 1],
                [3, 0, 1, 0, 0, 0, 1],
                [3, 0, 0, 1, 0, 1],
                [3, 0, 0, 0, 2],
                [2, 2, 0, 0, 0, 0, 1],
                [2, 1, 1, 0, 0, 1],
                [2, 1, 0, 1, 1],
                [2, 0, 2, 0, 1],
                [2, 0, 1, 2],
                [1, 3, 0, 0, 0, 1],
                [1, 2, 1, 0, 1],
                [1, 2, 0, 2],
                [1, 1, 2, 1],
                [1, 0, 4],
                [0, 4, 0, 0, 1],
                [0, 3, 1, 1],
                [0, 2, 3],
                [2, 0, 0, 1, 0, 0, 1],
                [2, 0, 0, 0, 1, 1],
                [1, 1, 1, 0, 0, 0, 1],
                [1, 1, 0, 1, 0, 1],
                [1, 0, 2, 0, 0, 1],
                [1, 1, 0, 0, 2],
                [1, 0, 1, 1, 1],
                [1, 0, 0, 3],
                [0, 3, 0, 0, 0, 0, 1],
                [0, 2, 1, 0, 0, 1],
                [0, 2, 0, 1, 1],
                [0, 1, 2, 0, 1],
                [0, 1, 1, 2],
                [0, 0, 3, 1],
                [1, 0, 0, 0, 1, 0, 1],
                [1, 0, 0, 0, 0, 2],
                [0, 1, 0, 1, 0, 0, 1],
                [0, 0, 2, 0, 0, 0, 1],
                [0, 1, 0, 0, 1, 1],
                [0, 0, 1, 1, 0, 1],
                [0, 0, 1, 0, 2],
                [0, 0, 0, 2, 1],
                [0, 0, 0, 0, 0, 1, 1]];
                break;

    case 14: _full = [[14],
                [12, 1],
                [11, 0, 1],
                [10, 2],
                [10, 0, 0, 1],
                [9, 1, 1],
                [8, 3],
                [9, 0, 0, 0, 1],
                [8, 1, 0, 1],
                [8, 0, 2],
                [7, 2, 1],
                [6, 4],
                [8, 0, 0, 0, 0, 1],
                [7, 1, 0, 0, 1],
                [7, 0, 1, 1],
                [6, 2, 0, 1],
                [6, 1, 2],
                [5, 3, 1],
                [4, 5],
                [6, 1, 0, 0, 0, 1],
                [6, 0, 1, 0, 1],
                [6, 0, 0, 2],
                [5, 2, 0, 0, 1],
                [5, 1, 1, 1],
                [5, 0, 3],
                [4, 3, 0, 1],
                [4, 2, 2],
                [3, 4, 1],
                [2, 6],
                [5, 0, 1, 0, 0, 1],
                [5, 0, 0, 1, 1],
                [4, 2, 0, 0, 0, 1],
                [4, 1, 1, 0, 1],
                [4, 1, 0, 2],
                [4, 0, 2, 1],
                [3, 3, 0, 0, 1],
                [3, 2, 1, 1],
                [3, 1, 3],
                [2, 4, 0, 1],
                [2, 3, 2],
                [1, 5, 1],
                [0, 7],
                [4, 0, 0, 1, 0, 1],
                [4, 0, 0, 0, 2],
                [3, 1, 1, 0, 0, 1],
                [3, 1, 0, 1, 1],
                [3, 0, 2, 0, 1],
                [3, 0, 1, 2],
                [2, 3, 0, 0, 0, 1],
                [2, 2, 1, 0, 1],
                [2, 2, 0, 2],
                [2, 1, 2, 1],
                [2, 0, 4],
                [1, 4, 0, 0, 1],
                [1, 3, 1, 1],
                [1, 2, 3],
                [0, 5, 0, 1],
                [0, 4, 2],
                [3, 0, 0, 0, 1, 1],
                [2, 1, 0, 1, 0, 1],
                [2, 0, 2, 0, 0, 1],
                [2, 1, 0, 0, 2],
                [2, 0, 1, 1, 1],
                [2, 0, 0, 3],
                [1, 2, 1, 0, 0, 1],
                [1, 2, 0, 1, 1],
                [1, 1, 2, 0, 1],
                [1, 1, 1, 2],
                [1, 0, 3, 1],
                [0, 4, 0, 0, 0, 1],
                [0, 3, 1, 0, 1],
                [0, 3, 0, 2],
                [0, 2, 2, 1],
                [0, 1, 4],
                [2, 0, 0, 0, 0, 2],
                [1, 1, 0, 0, 1, 1],
                [1, 0, 1, 1, 0, 1],
                [1, 0, 1, 0, 2],
                [1, 0, 0, 2, 1],
                [0, 2, 0, 1, 0, 1],
                [0, 1, 2, 0, 0, 1],
                [0, 2, 0, 0, 2],
                [0, 1, 1, 1, 1],
                [0, 0, 3, 0, 1],
                [0, 1, 0, 3],
                [0, 0, 2, 2],
                [0, 1, 0, 0, 0, 2],
                [0, 0, 1, 0, 1, 1],
                [0, 0, 0, 2, 0, 1],
                [0, 0, 0, 1, 2]];
                break;

    case 15: _full = [[15],
                [13, 1],
                [12, 0, 1],
                [11, 2],
                [11, 0, 0, 1],
                [10, 1, 1],
                [9, 3],
                [10, 0, 0, 0, 1],
                [9, 1, 0, 1],
                [9, 0, 2],
                [8, 2, 1],
                [7, 4],
                [8, 1, 0, 0, 1],
                [8, 0, 1, 1],
                [7, 2, 0, 1],
                [7, 1, 2],
                [6, 3, 1],
                [5, 5],
                [7, 0, 1, 0, 1],
                [7, 0, 0, 2],
                [6, 2, 0, 0, 1],
                [6, 1, 1, 1],
                [6, 0, 3],
                [5, 3, 0, 1],
                [5, 2, 2],
                [4, 4, 1],
                [3, 6],
                [6, 0, 0, 1, 1],
                [5, 1, 1, 0, 1],
                [5, 1, 0, 2],
                [5, 0, 2, 1],
                [4, 3, 0, 0, 1],
                [4, 2, 1, 1],
                [4, 1, 3],
                [3, 4, 0, 1],
                [3, 3, 2],
                [2, 5, 1],
                [1, 7],
                [5, 0, 0, 0, 2],
                [4, 1, 0, 1, 1],
                [4, 0, 2, 0, 1],
                [4, 0, 1, 2],
                [3, 2, 1, 0, 1],
                [3, 2, 0, 2],
                [3, 1, 2, 1],
                [3, 0, 4],
                [2, 4, 0, 0, 1],
                [2, 3, 1, 1],
                [2, 2, 3],
                [1, 5, 0, 1],
                [1, 4, 2],
                [0, 6, 1],
                [3, 1, 0, 0, 2],
                [3, 0, 1, 1, 1],
                [3, 0, 0, 3],
                [2, 2, 0, 1, 1],
                [2, 1, 2, 0, 1],
                [2, 1, 1, 2],
                [2, 0, 3, 1],
                [1, 3, 1, 0, 1],
                [1, 3, 0, 2],
                [1, 2, 2, 1],
                [1, 1, 4],
                [0, 5, 0, 0, 1],
                [0, 4, 1, 1],
                [0, 3, 3],
                [2, 0, 1, 0, 2],
                [2, 0, 0, 2, 1],
                [1, 2, 0, 0, 2],
                [1, 1, 1, 1, 1],
                [1, 0, 3, 0, 1],
                [1, 1, 0, 3],
                [1, 0, 2, 2],
                [0, 3, 0, 1, 1],
                [0, 2, 2, 0, 1],
                [0, 2, 1, 2],
                [0, 1, 3, 1],
                [0, 0, 5],
                [1, 0, 0, 1, 2],
                [0, 1, 1, 0, 2],
                [0, 1, 0, 2, 1],
                [0, 0, 2, 1, 1],
                [0, 0, 1, 3],
                [0, 0, 0, 0, 3]];
                break;

    case 16: _full = [[16],
                [14, 1],
                [13, 0, 1],
                [12, 2],
                [12, 0, 0, 1],
                [11, 1, 1],
                [10, 3],
                [10, 1, 0, 1],
                [10, 0, 2],
                [9, 2, 1],
                [8, 4],
                [9, 0, 1, 1],
                [8, 2, 0, 1],
                [8, 1, 2],
                [7, 3, 1],
                [6, 5],
                [8, 0, 0, 2],
                [7, 1, 1, 1],
                [7, 0, 3],
                [6, 3, 0, 1],
                [6, 2, 2],
                [5, 4, 1],
                [4, 6],
                [6, 1, 0, 2],
                [6, 0, 2, 1],
                [5, 2, 1, 1],
                [5, 1, 3],
                [4, 4, 0, 1],
                [4, 3, 2],
                [3, 5, 1],
                [2, 7],
                [5, 0, 1, 2],
                [4, 2, 0, 2],
                [4, 1, 2, 1],
                [4, 0, 4],
                [3, 3, 1, 1],
                [3, 2, 3],
                [2, 5, 0, 1],
                [2, 4, 2],
                [1, 6, 1],
                [0, 8],
                [4, 0, 0, 3],
                [3, 1, 1, 2],
                [3, 0, 3, 1],
                [2, 3, 0, 2],
                [2, 2, 2, 1],
                [2, 1, 4],
                [1, 4, 1, 1],
                [1, 3, 3],
                [0, 6, 0, 1],
                [0, 5, 2],
                [2, 1, 0, 3],
                [2, 0, 2, 2],
                [1, 2, 1, 2],
                [1, 1, 3, 1],
                [1, 0, 5],
                [0, 4, 0, 2],
                [0, 3, 2, 1],
                [0, 2, 4],
                [1, 0, 1, 3],
                [0, 2, 0, 3],
                [0, 1, 2, 2],
                [0, 0, 4, 1],
                [0, 0, 0, 4]];
                break;

    case 17: _full = [[17],
                [15, 1],
                [14, 0, 1],
                [13, 2],
                [12, 1, 1],
                [11, 3],
                [11, 0, 2],
                [10, 2, 1],
                [9, 4],
                [9, 1, 2],
                [8, 3, 1],
                [7, 5],
                [8, 0, 3],
                [7, 2, 2],
                [6, 4, 1],
                [5, 6],
                [6, 1, 3],
                [5, 3, 2],
                [4, 5, 1],
                [3, 7],
                [5, 0, 4],
                [4, 2, 3],
                [3, 4, 2],
                [2, 6, 1],
                [1, 8],
                [3, 1, 4],
                [2, 3, 3],
                [1, 5, 2],
                [0, 7, 1],
                [2, 0, 5],
                [1, 2, 4],
                [0, 4, 3],
                [0, 1, 5]];
                break;

    case 18: _full = [[18],
                [16, 1],
                [14, 2],
                [12, 3],
                [10, 4],
                [8, 5],
                [6, 6],
                [4, 7],
                [2, 8],
                [0, 9]];
                break;

    case 19: _full = [[19],
                [18, 1],
                [16, 2],
                [14, 3],
                [12, 4],
                [10, 5],
                [8, 6],
                [6, 7],
                [4, 8],
                [2, 9],
                [0, 10]];
                break;
						

	}
	
	
//Slims down the possible selections based on array size	
	if _size < _targ for (var _i = 0; _i < array_length(_full); _i++){
		if array_length(_full[_i]) > _size{
			array_delete(_full,_i,1);
			_i--;
		}	
	}
//returns what's left
	return _full;
	
}


function step_add(_array){
	var _sum = 0
	for (var _i = array_length(_array)-1; _i >= 0 ; _i--){
		_sum += _array[_i] * (_i+1);
	}
	return _sum;
}